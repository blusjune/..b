# _BMM.20230905.python_howto_tip.txt
# 20230905_235205




== Python in general ==

=== Use pip for installation ===
: 20230909_142443

* https://packaging.python.org/en/latest/tutorials/installing-packages/#use-pip-for-installing

<pre>
$ python3 -m pip install "SomeProject";   ### To install the latest version of 'SomeProject'
$ python3 -m pip install "SomeProject==1.4";   ### To install a specific version
$ python3 -m pip install "SomeProject>=1,<2";   ### To install greater than or equal to one version and less than another
$ python3 -m pip install "SomeProject~=1.4.2";   ### To install a version that's compatible with a certaini version
</pre>




=== Python default version management in Ubuntu ===
: 20230909_142428

* [https://unix.stackexchange.com/questions/410579/change-the-python3-default-version-in-ubuntu Change the Python3 default version in Ubuntu]




<pre>
I am using Ubuntu 16.04 LTS . I have python3 installed. There are two versions installed, python 3.4.3 and python 3.6 . Whenever I use python3 command, it takes python 3.4.3 by default. I want to use python 3.6 with python3.
	$ python3 --version shows version 3.4.3

I am installing ansible which supports version > 3.5 . So, whenever, I type ansible in the terminal, it throws error because of python 3.4
	$ sudo update-alternatives --config python3
	$ update-alternatives: error: no alternatives for python3
</pre>




<pre>
You need to update your update-alternatives , then you will be able to set your default python version.
	$ sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.4 2
	$ sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.6 1

Then run :
	$ sudo update-alternatives --config python

Set python3.6 as default.
Or use the following command to set python3.6 as default:
	$ sudo update-alternatives  --set python /usr/bin/python3.6
</pre>




* What I got after executing update-alternatives
<pre>
(.env) blusjune@aerosmith:/_b/w/x/ai_llm_hugging_face/wd.huggingface$ l /usr/bin/python*
lrwxrwxrwx 1 root root      24 Sep  9 13:39 /usr/bin/python -> /etc/alternatives/python*
lrwxrwxrwx 1 root root      10 Aug 18  2022 /usr/bin/python3 -> python3.10*
lrwxrwxrwx 1 root root      17 Aug 18  2022 /usr/bin/python3-config -> python3.10-config*
-rwxr-xr-x 1 root root 5913032 Jun 10 22:26 /usr/bin/python3.10*
lrwxrwxrwx 1 root root      34 Jun 10 22:26 /usr/bin/python3.10-config -> x86_64-linux-gnu-python3.10-config*

(.env) blusjune@aerosmith:/_b/w/x/ai_llm_hugging_face/wd.huggingface$ l /usr/local/bin/python*
lrwxrwxrwx 1 root root        9 Sep  9 00:43 /usr/local/bin/python3 -> python3.9*
lrwxrwxrwx 1 root root       16 Sep  9 00:43 /usr/local/bin/python3-config -> python3.9-config*
-rwxr-xr-x 1 root root 15257792 Sep  9 00:42 /usr/local/bin/python3.9*
-rwxr-xr-x 1 root root     3053 Sep  9 00:43 /usr/local/bin/python3.9-config*

(.env) blusjune@aerosmith:/_b/w/x/ai_llm_hugging_face/wd.huggingface$
</pre>




== Python profiling ==

# 20230911_072940
* [https://pytorch.org/tutorials/recipes/recipes/profiler_recipe.html PYTORCH PROFILER] PyTorch includes a simple profiler API that is useful when user needs to determine the most expensive operators in the model.
* [https://jiffyclub.github.io/snakeviz/ SnakeViz]
* [https://medium.com/@narenandu/profiling-and-visualization-tools-in-python-89a46f578989 Profiling and visualization tools in Python]
* [https://docs.python.org/3/library/profile.html The Python Profilers] Python documentation

# 20230906_000106
* [https://www.infoworld.com/article/3600993/9-fine-libraries-for-profiling-python-code.html 9 fine libraries for profiling Python code] May 23, 2022

# 20230913_000539
* [https://github.com/gaogaotiantian/viztracer VizTracer] VizTracer is a low-overhead logging/debugging/profiling tool that can trace and visualize your python code execution.




=== Introduction to the Python profilers ===

cProfile and profile provide deterministic profiling of Python programs. A profile is a set of statistics that describes how often and for how long various parts of the program executed. These statistics can be formatted into reports via the pstats module.

The Python standard library provides two different implementations of the same profiling interface:

# '''cProfile''' is recommended for most users; it is a C extension with reasonable overhead that makes it suitable for profiling long-running programs. Based on lsprof, contributed by Brett Rosen and Ted Czotter.
# '''profile''', a pure Python module whose interface is imitated by cProfile, but which adds significant overhead to profiled programs. If you are trying to extend the profiler in some way, the task might be easier with this module. Originally designed and written by Jim Roskind.

Note: The profiler modules are designed to provide an execution profile for a given program, not for benchmarking purposes (for that, there is '''[https://docs.python.org/3/library/timeit.html#module-timeit timeit]''' for reasonably accurate results). This particularly applies to benchmarking Python code against C code: the profilers introduce overhead for Python code, but not for C-level functions, and so the C code would seem faster than any Python one.




=== profiling hello world ===


==== import cProfile ====
* To profile a function that takes a single argument, you can do:
<pre>
>>> import cProfile
>>> import re
>>> 
>>> cProfile.run('re.compile("foo|bar")')
         6 function calls in 0.000 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.000    0.000 <string>:1(<module>)
        1    0.000    0.000    0.000    0.000 re.py:249(compile)
        1    0.000    0.000    0.000    0.000 re.py:288(_compile)
        1    0.000    0.000    0.000    0.000 {built-in method builtins.exec}
        1    0.000    0.000    0.000    0.000 {built-in method builtins.isinstance}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
</pre>


* Instead of printing the output at the end of the profile run, you can save the results to a file by specifying a filename to the run() function:
<pre>
>>> cProfile.run('re.compile("foo|bar")', 're.stats')
</pre>


==== import pstats; from pstats import SortKey; ====

* The pstats module's Stats class has a variety of methods for manipulating and printing the data saved into a profile results file (i.e., 're.stats' in the following example):
<pre>
>>> import pstats 
>>> from pstats import SortKey 
>>> p = pstats.Stats('re.stats')
>>> p.strip_dirs().sort_stats(-1).print_stats()
Tue Sep  5 23:48:47 2023    re.stats

         6 function calls in 0.000 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.000    0.000 <string>:1(<module>)
        1    0.000    0.000    0.000    0.000 re.py:249(compile)
        1    0.000    0.000    0.000    0.000 re.py:288(_compile)
        1    0.000    0.000    0.000    0.000 {built-in method builtins.exec}
        1    0.000    0.000    0.000    0.000 {built-in method builtins.isinstance}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}


<pstats.Stats object at 0x7fbcbde1d840>
>>> 
</pre>


* various examples of sorting
<pre>
>>> p.sort_stats(SortKey.NAME)
<pstats.Stats object at 0x7fbcbde1d840>
>>> p.print_stats()
Tue Sep  5 23:48:47 2023    re.stats

         6 function calls in 0.000 seconds

   Ordered by: function name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.000    0.000 {built-in method builtins.exec}
        1    0.000    0.000    0.000    0.000 {built-in method builtins.isinstance}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
        1    0.000    0.000    0.000    0.000 <string>:1(<module>)
        1    0.000    0.000    0.000    0.000 re.py:288(_compile)
        1    0.000    0.000    0.000    0.000 re.py:249(compile)


<pstats.Stats object at 0x7fbcbde1d840>
>>> 
>>> p.sort_stats(SortKey.CUMULATIVE).print_stats(10)
Tue Sep  5 23:48:47 2023    re.stats

         6 function calls in 0.000 seconds

   Ordered by: cumulative time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.000    0.000 {built-in method builtins.exec}
        1    0.000    0.000    0.000    0.000 <string>:1(<module>)
        1    0.000    0.000    0.000    0.000 re.py:249(compile)
        1    0.000    0.000    0.000    0.000 re.py:288(_compile)
        1    0.000    0.000    0.000    0.000 {built-in method builtins.isinstance}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}


<pstats.Stats object at 0x7fbcbde1d840>
>>> 
</pre>


* use dump_stats('filename') function to write the results of the current profile to the file 'filename'
<pre>
>>> p.sort_stats(SortKey.CUMULATIVE).dump_stats('re.stats.SortKey_CUMULATIVE.log')
>>> 
</pre>


=== An example Python code for profiling ===

==== pycode01.py ====

<pre>

import numpy as np

"""
This is
multi-line 
comments
"""
def F_matmul_with_numpy(a, b): # this is one-line comment
        c = np.multiply(a, b); 
        print(c);
        return c;

a = [[1,2], [3,4]];
b = [[5,6], [7,8]];
F_matmul_with_numpy(a, b); 

</pre>




=== VizTracer ===

==== VizTracer CLI (Command Line Interface) ====

Assume you have a python script to run:
 python3 my_script.py arg1 arg2

You can simply use VizTracer by
 viztracer my_script.py arg1 arg2

A result.json file will be generated, which you can open with vizviewer.  vizviewer will host an HTTP server on http://localhost:9001. You can also open your browser and use that address.

If you do not want vizviewer to open the webbrowser automatically, you can use
 vizviewer --server_only result.json

If you just need to bring up the trace report once, and do not want the persistent server, use
 vizviewer --once result.json

You can display all the files in a directory and open them in browser too
 vizviewer ./

For very large trace files, try external trace processor
 vizviewer --use_external_processor result.json



==== VizTracer Inline Coding ====

You can also manually start/stop VizTracer in your script as well.

<pre>
from viztracer import VizTracer

tracer = VizTracer()
tracer.start()
# Something happens here
tracer.stop()
tracer.save() # also takes output_file as an optional argument
</pre>


Or, you can do it with with statement
<pre>
with VizTracer(output_file="optional.json") as tracer:
    # Something happens here
</pre>




== Python performance benchmarking ==


=== Lib/timeit.py ===


==== timeit command-line interface ====

<pre>
python3 -m timeit '"-".join(str(n) for n in range(100))'
10000 loops, best of 5: 30.2 usec per loop

python3 -m timeit '"-".join([str(n) for n in range(100)])'
10000 loops, best of 5: 27.5 usec per loop

python3 -m timeit '"-".join(map(str, range(100)))'
10000 loops, best of 5: 23.2 usec per loop
</pre>


==== timeit API in the code ====

<pre>
>>> import timeit

>>> timeit.timeit('"-".join(str(n) for n in range(100))', number=10000)
0.3018611848820001

>>> timeit.timeit('"-".join([str(n) for n in range(100)])', number=10000)
0.2727368790656328

>>> timeit.timeit('"-".join(map(str, range(100)))', number=10000)
0.23702679807320237
</pre>




== shell command execution ==

=== escape to the shell ===

==== import os; os.system('ls -alF'); ====

<pre>
>>> import os
>>> os.system('ls -alF')
total 44
drwxrwxr-x 3 blusjune blusjune 4096 Sep  5 23:51 ./
drwxrwxr-x 4 blusjune blusjune 4096 Sep  4 16:48 ../
drwxrwxr-x 6 blusjune blusjune 4096 Sep  4 17:09 .env/
-rw-rw-r-- 1 blusjune blusjune 7064 Sep  5 23:46 profile.calls.log
-rw-rw-r-- 1 blusjune blusjune 7064 Sep  5 23:46 profile.cumulative.log
-rw-rw-r-- 1 blusjune blusjune  630 Sep  5 23:48 re.stats
-rw-rw-r-- 1 blusjune blusjune  616 Sep  5 23:51 re.stats.SortKey_CUMULATIVE.log
-rw-rw-r-- 1 blusjune blusjune 5695 Sep  5 23:37 restats
0
>>> 
</pre>




