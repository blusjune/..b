/* SysAdm: Linux Ubuntu System Administration Tips */



== xscreensaver ==
: 20231020_220524

$ xscreensaver-command -lock
$ xscreensaver-command -activate
$ xscreensaver-command -prefs




== systemsettings ==
: 20231016_233441

* 'systemsettings' launches the system setting configuration GUI: this is pretty useful.




== rsync ==
: 20230910_101144




=== rsync tutorial ===
* source: https://www.digitalocean.com/community/tutorials/how-to-use-rsync-to-sync-local-and-remote-directories


==== Definition ====
Rsync, which stands for remote sync, is a remote and local file synchronization tool. It uses an algorithm to minimize the amount of data copied by only moving the portions of files that have changed.

Rsync is a very flexible network-enabled syncing tool. Due to its ubiquity on Linux and Unix-like systems and its popularity as a tool for system scripts, it is included on most Linux distributions by default.

In this tutorial, we will define Rsync, review the syntax when using rsync, explain how to use Rsync to sync with a remote system, and other options available to you.


==== Prerequisites ====
In order to practice using rsync to sync files between a local and remote system, you will need two machines to act as your local computer and your remote machine, respectively. These two machines could be virtual private servers, virtual machines, containers, or personal computers as long as they have been properly configured.

If you plan to follow this guide using servers, it would be prudent to set them up with administrative users and to configure a firewall on each of them. To set up these servers, follow our Initial Server Setup Guide.

Regardless of what types of machines you use to follow this tutorial, you will need to have created SSH keys on both of them. Then, copy each server's public key to the other server's authorized_keys file as outlined in Step 2 of that guide.

This guide was validated on machines running Ubuntu 20.04, although it should generally work with any computers running a Linux-based operating system that have rsync installed.


==== Understanding Rsync Syntax: Using Rsync to sync with different directory in a local system ====

The syntax for rsync operates similar to other tools, such as ssh, scp, and cp.

First, change into your home directory by running the following command:
 cd ~

Then create a test directory:
 mkdir dir1

Create another test directory:
 mkdir dir2

Now add some test files:
 touch dir1/file{1..100}

There is now a directory called dir1 with 100 empty files in it. Confirm by listing out the files:
 ls dir1

Output
 file1    file18  file27  file36  file45  file54  file63  file72  file81  file90
 file10   file19  file28  file37  file46  file55  file64  file73  file82  file91
 file100  file2   file29  file38  file47  file56  file65  file74  file83  file92
 file11   file20  file3   file39  file48  file57  file66  file75  file84  file93
 file12   file21  file30  file4   file49  file58  file67  file76  file85  file94
 file13   file22  file31  file40  file5   file59  file68  file77  file86  file95
 file14   file23  file32  file41  file50  file6   file69  file78  file87  file96
 file15   file24  file33  file42  file51  file60  file7   file79  file88  file97
 file16   file25  file34  file43  file52  file61  file70  file8   file89  file98
 file17   file26  file35  file44  file53  file62  file71  file80  file9   file99

You also have an empty directory called dir2. To sync the contents of dir1 to dir2 on the same system, you will run rsync and use the -r flag, which stands for 'recursive' and is necessary for directory syncing:
 rsync -r dir1/ dir2

Another option is to use the -a flag, which is a combination flag and stands for 'archive'. This flag syncs recursively and preserves symbolic links, special and device files, modification times, groups, owners, and permissions. It is more commonly used than -r and is the recommended flag to use. Run the same command as the previous example, this time using the -a flag:
 rsync -a dir1/ dir2

Please note that there is a trailing slash (/) at the end of the first argument in the syntax of the the previous two commands and highlighted here:
 rsync -a dir1/ dir2

This trailing slash signifies the contents of dir1. Without the trailing slash, dir1, including the directory, would be placed within dir2. The outcome would create a hierarchy like the following:
 ~/dir2/dir1/[files]

Another tip is to double-check your arguments before executing an rsync command. Rsync provides a method for doing this by passing the -n or --dry-run options. The -v flag, which means 'verbose', is also necessary to get the appropriate output. You will combine the a, n, and v flags in the following command:
 rsync -anv dir1/ dir2

Output
 sending incremental file list
 ./
 file1
 file10
 file100
 file11
 file12
 file13
 file14
 file15
 file16
 file17
 file18
 . . .

Now compare that output to the one you receive when removing the trailing slash, as in the following:
 rsync -anv dir1 dir2
Output
 sending incremental file list
 dir1/
 dir1/file1
 dir1/file10
 dir1/file100
 dir1/file11
 dir1/file12
 dir1/file13
 dir1/file14
 dir1/file15
 dir1/file16
 dir1/file17
 dir1/file18
 . . .

This output now demonstrates that the directory itself was transferred, rather than only the files within the directory.


==== Understanding Rsync Syntax: Using Rsync to sync with a remote system ====

To use rsync to sync with a remote system, you only need SSH access configured between your local and remote machines, as well as rsync installed on both systems. Once you have SSH access verified between the two machines, you can sync the dir1 folder from the previous section to a remote machine by using the following syntax. Please note in this case, that you want to transfer the actual directory, so you will omit the trailing slash:
 rsync -a ~/dir1 username@remote_host:destination_directory

This process is called a push operation because it 'pushes' a directory from the local system to a remote system. The opposite operation is pull, and is used to sync a remote directory to the local system. If the dir1 directory were on the remote system instead of your local system, the syntax would be the following:
 rsync -a username@remote_host:/home/username/dir1 place_to_sync_on_local_machine

Like cp and similar tools, the source is always the first argument, and the destination is always the second.


==== Understanding Rsync Syntax: Using Other Rsync Options ====

Rsync provides many options for altering the default behavior of the utility, such as the flag options you learned about in the previous section.

If you are transferring files that have not already been compressed, like text files, you can reduce the network transfer by adding compression with the -z option:
 rsync -az source destination

The -P flag is also helpful. It combines the flags --progress and --partial. This first flag provides a progress bar for the transfers, and the second flag allows you to resume interrupted transfers:
 rsync -azP source destination

Output
 sending incremental file list
 created directory destination
 source/
 source/file1
               0 100%    0.00kB/s    0:00:00 (xfr#1, to-chk=99/101)
 sourcefile10
               0 100%    0.00kB/s    0:00:00 (xfr#2, to-chk=98/101)
 source/file100
               0 100%    0.00kB/s    0:00:00 (xfr#3, to-chk=97/101)
 source/file11
               0 100%    0.00kB/s    0:00:00 (xfr#4, to-chk=96/101)
 source/file12
               0 100%    0.00kB/s    0:00:00 (xfr#5, to-chk=95/101)
 . . .

If you run the command again, you will receive a shortened output since no changes have been made. This illustrates Rsync's ability to use modification times to determine if changes have been made:
 rsync -azP source destination

Output
 sending incremental file list
 sent 818 bytes received 12 bytes 1660.00 bytes/sec
 total size is 0 speedup is 0.00

Say you were to update the modification time on some of the files with a command like the following:
 touch dir1/file{1..10}

Then, if you were to run rsync with -azP again, you will notice in the output how Rsync intelligently re-copies only the changed files:
 rsync -azP source destination

Output
 sending incremental file list
 file1
             0 100%    0.00kB/s    0:00:00 (xfer#1, to-check=99/101)
 file10
             0 100%    0.00kB/s    0:00:00 (xfer#2, to-check=98/101)
 file2
             0 100%    0.00kB/s    0:00:00 (xfer#3, to-check=87/101)
 file3
             0 100%    0.00kB/s    0:00:00 (xfer#4, to-check=76/101)
 . . .

In order to keep two directories truly in sync, it is necessary to delete files from the destination directory if they are removed from the source. By default, rsync does not delete anything from the destination directory.

You can change this behavior with the --delete option. Before using this option, you can use -n, the --dry-run option, to perform a test to prevent unwanted data loss:
 rsync -an --delete source destination

If you prefer to exclude certain files or directories located inside a directory you are syncing, you can do so by specifying them in a comma-separated list following the --exclude= option:
 rsync -a --exclude=pattern_to_exclude source destination

If you have a specified pattern to exclude, you can override that exclusion for files that match a different pattern by using the --include= option:
 rsync -a --exclude=pattern_to_exclude --include=pattern_to_include source destination

Finally, Rsync's --backup option can be used to store backups of important files. It is used in conjunction with the --backup-dir option, which specifies the directory where the backup files should be stored:
 rsync -a --delete --backup --backup-dir=/path/to/backups /path/to/source destination


==== Conclusion ====

Rsync can streamline file transfers over networked connections and add robustness to local directory syncing. The flexibility of Rsync makes it a good option for many different file-level operations.
A mastery of Rsync allows you to design complex backup operations and obtain fine-grained control over how and what is transferred.




== gpg ==


 $ gpg --version --cipher-algo
 <pre>
gpg (GnuPG) 2.2.27
libgcrypt 1.9.4
Copyright (C) 2021 Free Software Foundation, Inc.
License GNU GPL-3.0-or-later <https://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Home: /home/blusjune/.gnupg
Supported algorithms:
Pubkey: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
Cipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
        CAMELLIA128, CAMELLIA192, CAMELLIA256
Hash: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
Compression: Uncompressed, ZIP, ZLIB, BZIP2
</pre>




== multi-head display in Linux X Window System ==
: 20230903_084631

* Use 'xrandr' (see also: [https://www.x.org/releases/X11R7.5/doc/man/man1/xrandr.1.html man xrandr])
* Here is a good reference to 'How to use xrandr': https://wiki.archlinux.org/title/Multihead
** easy-to-understand description with good examples


=== ArchLinux's description ===

* [https://wiki.archlinux.org/title/Multihead Multihead]

Multi-head, multi-screen, multi-display or multi-monitor represent setups with multiple display devices attached to a single computer. This article provides a general description for several multi-head setup methods, and provides some configuration examples.

Note: The terms used in this article are very specific to avoid confusion:
* Monitor: refers to a physical display device, such as an LCD panel.
* Screen: refers to an X-Window screen (that is: a monitor attached to a display).
* Display: refers to a collection of screens that are in use at the same time showing parts of a single desktop (you can drag windows among all screens in a single display).

RandR (Rotate and Resize) is an X Window System extension, which allows clients to dynamically change (e.g. resize, rotate, reflect) screens. In most cases, it can fully replace the old Xinerama setup. See an explanation why RandR is better than Xinerama.
RandR can be configured for the current session via the xrandr tool, arandr or persistently via an xorg.conf file.


==== Configuration example using xrandr: positioning two monitors ====

You may arrange your screens either 
* relatively to each other (using the --right-of, --left-of, --above, --below options),
* or by absolute coordinates (using the --pos option
** note that in this case you usually need to know resolutions of your monitors).

Let's assume that we have two monitors and its configuration is as the following:
 <pre>
+---------------+ +---------------+
|               | |               |
|   Monitor-1   | |   Monitor-2   |
|    (VGA1)     | |    (HDMI1)    |
|               | |               |
+---------------+ +---------------+
</pre>


* VGA1 left of HDMI1 at their preferred resolutions
 $ xrandr --output VGA1 --auto --output HDMI1 --auto --right-of VGA1;

* VGA1 right of HDMI1 at fixed resolutions
 $ xrandr --output VGA1 --mode 1024x768 --pos 1920x0 --output HDMI1 --mode 1920x1080 --pos 0x0
 or
 $ xrandr --output VGA1 --mode 1024x768 --output HDMI1 --mode 1920x1080 --left-of VGA1


* configuration using xorg.conf
 $ cat /etc/X11/xorg.conf.d/10-monitor.conf
 <pre>
Section "Monitor"
    Identifier  "VGA1"
    Option      "Primary" "true"
EndSection

Section "Monitor"
    Identifier  "HDMI1"
    Option      "LeftOf" "VGA1"
EndSection
</pre>


==== Combine screens into virtual display ====

 <pre>
                    
+-------------------+   +-------------------+   +-------------------+   
|(0+0)              |   |(1920+0)           |   |(3840+0)           |   
|   DisplayPort-3   |   |   DisplayPort-4   |   |     HDMI-A-0      |   
|    (1920x1200)    |   |    (1920x1200)    |   |    (1920x1200)    |   
|                   |   |                   |   |                   |   
+-------------------+   +-------------------+   +-------------------+   

</pre>

* Get monitor list by doing xrandr --listmonitors
 $ xrandr --listmonitors 
 <pre>
0: +*DisplayPort-4 1920/518x1200/324+1920+0  DisplayPort-4
1: +DisplayPort-3 1920/518x1200/324+0+0  DisplayPort-3
2: +HDMI-A-0 1920/518x1200/324+3840+0  HDMI-A-0
</pre>

* Create virtual display: here below 'auto' determines the size of the virtual display, setting this to auto will automatically create the correct size of the display array. Monitor order in this command does not matter and the monitors need to be rearranged correctly after or before this command is executed.
 $ xrandr --setmonitor SomeName auto DisplayPort-4,DisplayPort-3,HDMI-A-0




== Vim (vim) drawit ==

* [https://www.vim.org/scripts/script.php?script_id=40 DrawIt! : Ascii drawing plugin: lines, ellipses, arrows, fills, and more!]
* [https://www.vim.org/scripts/download_script.php?src_id=21108 DrawIt.vba.gz] version 13 download

 <pre>

mkdir -p ~/t/vimball/drawit;
cd ~/t/vimball/drawit;
w3m https://www.vim.org/scripts/script.php?script_id=40 # download the latest version (ver. 13) of DrawIt.vba.gz
vim DrawIt.vba.gz
:so %
:q

</pre>

== Xclock ==
: 20230903_090344

 <pre>
xclock -update 1 -analog -geometry 100x100+1720+0 &
xclock -update 1 -digital -geometry 240x40+1470+0 &
</pre>




== .xinitrc ==
: 20230903_084358

=== .xinitrc example ===
Just for your information, let me share an example of .xinitrc below:

 <pre>

#!/bin/sh
display-adjust
keyboard-adjust
touchpad-toggle
xset s on +dpms
xautolock -time 10 -locker slock &
xmonad &> ~/.xmonad/log

</pre>

* display-adjust: custom xrandr script that adjusts display based on whether VGA is connected
* keyboard-adjust: custom script that sets up keyboard layouts and swaps capslock and left ctrl (via setxkbmap)
* touchpad-toggle: script that toggles whether the touchpad is enabled (I like it off by default)
* xset s on +dpms: make screen blank after 10m of inactivity (default)
* xautolock -time 10 -locker slock &: lock screen (with slock) after 10m of inactivity
* xmonad &> ~/.xmonad/log: start xmonad and redirect stdout & stderr to a log file




== Korean input method (for Window Maker - wmaker) ==
: 20230902_094502

=== Window Maker configuration to enable Korean input method ===

Key point is to put a command line 'ibus-daemon -d' in the '~/GNUstep/Library/WindowMaker/autostart' file.
(There is no need to put 'ibus-daemon -d' in the ~/.xinitrc file.)

 <pre>
blusjune@aerosmith:~$ cat GNUstep/Library/WindowMaker/autostart
#!/bin/sh
xset m 20/10 4
ibus-daemon -d
</pre>


=== any .xinitrc configuration for ibus? ===
: 20230902_094502

* Q. What about .xinitrc? Do we need to put some 'ibus' related configuration inside this file?
* A. No. only one command line is enough.

 <pre>
$ cat ~/.xinitrc

exec /usr/bin/wmaker
</pre>


=== How to invoke a Korean input method setting program (even) in Window Maker? ===
: 20230902_090630

Simply, 'ibus-setup' is the answer.
use 'ibus-setup' command as the following.

 $ ibus-setup




== GUI tool for diff & merge in Linux ==
: 20230902_090415

Please use 'meld'.
'meld' is the easiest-to-use one which provides most intuitive UI, among many tools such as kompare, diffuse, and meld.

 $ sudo apt install meld
 $ sudo apt install kompare
 $ sudo apt install diffuse




== BWX (B's Web eXecution) troubleshooting ==
: 20230822_224457 

* Error: BWX execution failure
** Tried to execute the command '/_b/x/bmmpy wiki' via BWX
** but it generated an error: /_b/x/bmmpy permission denied

* How to investigate the problematic situation
** check the following logs
*** /var/log/apache2/error.log
*** /var/log/apache2/access.log
*** /var/log/syslog

* Root cause:
** Apache2+PHP uses 'www-data' account ID/group
** But the ~blusjune/ directory has 'drwxr-x---' permission
** So Apache2+PHP could not access the file '/_b/x/bmmpy'

* Solution:
** add 'www-data' group ID to the 'blusjune' group
** vigr; vigr -s; systemctl restart apache2;




== How to change date and time ==
: 20230823_235501

$ sudo timedatectl list-timezones;
$ sudo timedatectl set-timezone "America/Los_Angeles";
$ sudo timedatectl set-time "2023-08-22 15:41:00";




== Set kde-plasma as a default desktop (window manager) ==
: 20230823_235554
: 20230902_090514: later, I decided to return back to wmaker (WindowMaker) for its rock-solid stability

* '~/.dmrc' should have the following contents
 <pre>
blusjune@aerosmith:~$ cat ~/.dmrc 
[Desktop]
Session=plasma
</pre>

* 'plasma.desktop' file should be in the '/usr/share/xsessions' directory
 <pre>
blusjune@aerosmith:~$ ls -alF /usr/share/xsessions
total 40
drwxr-xr-x   2 root root  4096 Aug 21 19:28 ./
drwxr-xr-x 479 root root 20480 Aug 21 22:42 ../
-rw-r--r--   1 root root  3047 Oct 17  2022 plasma.desktop
-rw-r--r--   1 root root   203 Oct  8  2021 wmaker-common.desktop
-rw-r--r--   1 root root  6832 Feb 16  2021 xfce.desktop
</pre>




== Reset the kde-plasma desktop configuration to the factory init status ==
: 20230824_000058

 <pre>
$ cd ~/.config
$ rm plasma-org.kde.plasma.desktop-appletsrc
</pre>





== How to enable Apache2 HTTPS in Ubuntu system ==

* https://www.rosehosting.com/blog/how-to-enable-https-protocol-with-apache-2-on-ubuntu-20-04/


=== Prerequisites ===

A server with Ubuntu 20.04 and Apache.
A root user access or regular user with sudo privileges.


=== Step 1: Log in via SSH and Update Packages ===

Log in to your Ubuntu 20.04 VPS through SSH:

ssh sshuser@IP_Address -p Port_number
Replace “sshuser” with a user that has sudo privileges, or root. Additionally, replace “IP_Address” and “Port_Number” with your server’s respective IP address and SSH port.

Once logged in, you can check whether you have the proper Ubuntu 20.04 version installed on your server with the following command:

$ sudo lsb_release -a
You should get this output:

No LSB modules are available.
Distributor ID: Ubuntu
Description: Ubuntu 20.04.3 LTS
Release: 20.04
Codename: focal
Then, run the following command to make sure that all installed packages on the server are updated to their latest available versions:

$ sudo apt update && sudo apt upgrade
This ensures compatibility between packages.


=== Step 2: Enable Mod SSL ===

Before starting, we need to enable the Apache SSL module, run this command:

$ sudo a2enmod ssl

As seen in the message after running the command, we need to restart Apache to activate the changes.

$ sudo systemctl restart apache2


=== Step 3: Create a Self-Signed SSL Certificate ===

A self-signed SSL certificate is a good option to choose when you are trying or testing things out on your Apache server. While your personal certificate won't mean anything to browsers, and visitors will still get a warning message if they visit your site directly, you can at least be sure that you're protected against "man-in-the-middle" attacks. If you already have a paid SSL certificate, you can skip this step and continue.

Run this command to generate a self-signed SSL certificate.

$ sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/server.yourdomain.com.key -out /etc/ssl/certs/server.yourdomain.com.crt
When running the command above, you will need to answer the prompts.

Country Name (2 letter code) [AU]:
State or Province Name (full name) [Some-State]:
Locality Name (eg, city) []:
Organization Name (eg, company) [Internet Widgits Pty Ltd]:
Organizational Unit Name (eg, section) []:
Common Name (e.g. server FQDN or YOUR name) []:
Email Address []:
Make sure you type the domain/subdomain you want to install the SSL certificate for. For instance, you can type server.yourdomain.com

The command above will store the private key at /etc/ssl/private/server.yourdomain.com.key and the certificate file at /etc/ssl/certs/server.yourdomain.com.crt


=== Step 4: Enable HTTPS and Install an SSL Certificate ===

In this tutorial, we will use a separate Apache virtual host file instead of the default configuration file. We assume that you already have a working apache virtual host for your domain. We can run the command below to copy yourdomain.com.conf configuration file to yourdomain.com-ssl.conf. Please change yourdomain.com to your own .conf file in the command to make sure it runs properly.

$ sudo cp -a /etc/apache2/sites-available/yourdomain.com{.conf,-ssl.conf}
Let's edit the new file.

$ sudo nano /etc/apache2/sites-available/yourdomain.com-ssl.conf
Replace

<VirtualHost *:80>
in the first line with

<VirtualHost *:443>
Then, add these three lines:

SSLEngine on
SSLCertificateKeyFile /etc/ssl/private/server.yourdomain.com.key
SSLCertificateFile /etc/ssl/certs/server.yourdomain.com.crt
Save the file then exit.

After this, we need to enable the SSL version of your site. We can run this command to enable the site:

$ sudo a2ensite yourdomain.com-ssl.conf

At last, check your apache2 configuration by running this command:


$ sudo apache2ctl -t
If everything is okay then you would see "Syntax OK" message, you can restart Apache.

$ sudo systemctl restart apache2
Please note, if you already have a paid SSL certificate, you can edit the SSLCertificateKeyFile and SSLCertificateFile directives and point them to the correct path of your SSL certificate file and its private key.

You can also run the command below to check if the SSL version of your website is enabled or not.


That is all! When Apache restarts, it will be configured to allow SSL connections by using the generated self-signed SSL certificates. When you navigate to your website via HTTPS, you'll be warned that it's not a trusted certificate. That's okay. We know this since we signed it ourselves! Just proceed and you will see your actual website. This will not happen if you use a paid SSL certificate or an SSL certificate provided by Letsencrypt.

Congratulations! At this point, you should be able to enable HTTPS protocol with Apache2 on Ubuntu 20.04.

Of course, you don't have to know how to enable HTTPS protocol with Apache2 on Ubuntu 20.04 if you have an Ubuntu 20.04 VPS hosted with us. You can simply ask our support team to enable HTTPS protocol with Apache2 on Ubuntu 20.04 for you. They are available 24/7 and will be able to help you with the HTTPS protocol configuration.

PS. If you enjoyed reading this blog post on how to enable HTTPS protocol with Apache2 on Ubuntu 20.04, feel free to share it on social networks or simply leave a comment in the comments section. Thank you.




== Nemo file manager (previously nautilus) ==

* https://wiki.archlinux.org/title/Nemo

Nemo is a fork of GNOME Files (formerly known as Nautilus). It is also the default file manager of the Cinnamon desktop. Nemo is based on the Files 3.4 code. It was created as a response to the changes in Files 3.6 which saw features such as type ahead find and split pane view removed.


=== How to set/change the default terminal emulator for Nemo ===
: 20231110_222247

$ gsettings set org.cinnamon.desktop.default-applications.terminal exec konsole


=== Nemo actions ===
Nemo allows the user to add new entries to the context menu. The file /usr/share/nemo/actions/sample.nemo_action contains an example of a Nemo action. Directories to place custom action files:

/usr/share/nemo/actions/ for system-wide actions
~/.local/share/nemo/actions/ for user actions
Action files must have the .nemo_action file extension.




== Mirroring web sites using wget ==
: 20231116_223739


<pre>
blusjune@aerosmith:/media/blusjune/H05T0_pinkfloyd/..__ROOT__/.websites/thenewyorker$ cat .bdx.0100.y.wget.mirror.thenewyorker.sh 
#!/bin/bash
# 20231116_214030
# .bdx.0100.y.wget.mirror.thenewyorker.sh


_user_agent="Brave/114.1.52.126 Google Chrome/114.0.5735.134 Internet Explorer/11.00.19041.1 Microsoft Edge/114.0.1823.51";
_target_website="http://www.newyorker.com/";
#_domain_list="www.newyorker.com,contest.newyorker.com,downloads.newyorker.com,media.newyorker.com,newyorker.com,store.newyorker.com,subscribe.newyorker.com,video.newyorker.com";
_domain_list="newyorker.com";


wget -mpHkKEb -t 1 -e robots=off -U $_user_agent -D $_domain_list $_target_website


#wget -mpkKEb -t 1 -e robots=off -U $_user_agent -D $_domain_list $_target_website
#wget -mpHkKEb -t 1 -e robots=off -U $_user_agent $_target_website
#wget -mpHkKEb -t 1 -e robots=off -U "Brave/114.1.52.126 Google Chrome/114.0.5735.134 Internet Explorer/11.00.19041.1 Microsoft Edge/114.0.1823.51" http://www.newyorker.com/
</pre>




